# -*- coding: utf-8 -*-
'''Chemical Engineering Design Library (ChEDL). Utilities for process modeling.
Copyright (C) 2018, Caleb Bell <Caleb.Andrew.Bell@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'''

import numpy as np
from numpy.testing import assert_allclose
import pytest
from thermo.utils import TPD
from thermo.eos import *
from thermo.eos_mix import *
from scipy.misc import derivative
from scipy.optimize import minimize, newton
from math import log, exp, sqrt, log10
from thermo import Mixture
from thermo.property_package import *
from fluids.numerics import linspace, logspace, normalize
from thermo.property_package_constants import (PropertyPackageConstants, PR_PKG)





@pytest.mark.deprecated
def test_PRMIX_pkg_H():
    zs = [0.4, 0.6]
    m = Mixture(['Ethane', 'Heptane'], zs=zs, T=300, P=1E6)

    kij = .0
    kijs = [[0,kij],[kij,0]]
    Tcs = [305.322, 540.13]
    Pcs = [4872200.0, 2736000.0]
    omegas = [0.099, 0.349]

    pkg = GceosBase(eos_mix=PRMIX, VaporPressures=m.VaporPressures, Tms=m.Tms, Tbs=m.Tbs,
                    Tcs=Tcs, Pcs=Pcs, omegas=omegas,
                    kijs=kijs, eos_kwargs=None,
                 HeatCapacityGases=m.HeatCapacityGases)
    pkg.FLASH_VF_TOL = 1e-12

    # Case  gas -gas pressure difference
    pkg.flash(T=450, P=400, zs=m.zs)
    H1 = pkg.Hm
    assert pkg.phase == 'g'
    pkg.flash(T=450, P=1e6, zs=m.zs)
    H2 = pkg.Hm
    assert pkg.phase == 'g'
    assert_allclose(H1 - H2, 1638.19303081, rtol=1e-3)

    # Case gas to VF= = 0 at same T
    pkg.flash(T=350, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    H1 = pkg.Hm
    pkg.flash(T=350, VF=.5, zs=m.zs)
    assert pkg.phase == 'l/g'
    H2 = pkg.Hm
    assert_allclose(H1 - H2, 16445.143155, rtol=1e-3)


    # Higher pressure, less matching (gas constant diff probably; gas-liquid difference! No partial phase.)
    pkg.flash(T=450, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    H1 = pkg.Hm
    pkg.flash(T=450, P=1e8, zs=m.zs)
    assert pkg.phase == 'l'
    H2 = pkg.Hm
    H1 - H2
    assert_allclose(H1 - H2, 13815.6666172, rtol=1e-3)

    # low P fluid to saturation pressure (both gas)
    pkg.flash(T=450, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    H1 = pkg.Hm
    H1 = pkg.Hm
    pkg.flash(T=450, VF=1, zs=m.zs)
    assert pkg.phase == 'g'
    H2 = pkg.Hm
    H2 = pkg.Hm
    assert_allclose(H1 - H2, 2003.84468984, rtol=1e-3)

    # low pressure gas to liquid saturated
    pkg.flash(T=350, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    H1 = pkg.Hm
    pkg.flash(T=350, VF=0, zs=m.zs)
    assert pkg.phase == 'l'
    H2 = pkg.Hm
    assert_allclose(H1 - H2, 23682.3468207, rtol=1e-3)

    # High pressure liquid to partial evaporation
    pkg.flash(T=350, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    H1 = pkg.Hm
    pkg.flash(T=350, VF=.25, zs=m.zs)
    assert pkg.phase == 'l/g'
    H2 = pkg.Hm
    assert_allclose(H1 - H2, -2328.21259061, rtol=1e-3)

    # High pressure temperature change
    pkg.flash(T=300, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    H1 = pkg.Hm
    pkg.flash(T=400, P=1e7, zs=m.zs)
    assert pkg.phase == 'l'
    H2 = pkg.Hm
    assert_allclose(H1 - H2, -18470.2994798, rtol=1e-3)

    # High pressure temperature change and phase change
    pkg.flash(T=300, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    H1 = pkg.Hm
    pkg.flash(T=400, P=1e5, zs=m.zs)
    assert pkg.phase == 'g'
    H2 = pkg.Hm
    H1 - H2
    assert_allclose(H1 - H2, -39430.7145672, rtol=1e-3)

@pytest.mark.deprecated
def test_PRMIX_pkg_S():
    zs = [0.4, 0.6]
    m = Mixture(['Ethane', 'Heptane'], zs=zs, T=300, P=1E6)

    kij = .0
    kijs = [[0,kij],[kij,0]]
    Tcs = [305.322, 540.13]
    Pcs = [4872200.0, 2736000.0]
    omegas = [0.099, 0.349]

    pkg = GceosBase(eos_mix=PRMIX, VaporPressures=m.VaporPressures, Tms=m.Tms, Tbs=m.Tbs,
                    Tcs=Tcs, Pcs=Pcs, omegas=omegas,
                    kijs=kijs, eos_kwargs=None,
                 HeatCapacityGases=m.HeatCapacityGases)
    pkg.FLASH_VF_TOL = 1e-12


    # Case  gas -gas pressure difference
    pkg.flash(T=450, P=400, zs=m.zs)
    S1 = pkg.Sm
    assert pkg.phase == 'g'
    pkg.flash(T=450, P=1e6, zs=m.zs)
    S2 = pkg.Sm
    assert pkg.phase == 'g'
    assert_allclose(S1 - S2, 67.59095157604824, rtol=1e-3)

    # Case gas to VF= = 0 at same T
    pkg.flash(T=350, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    S1 = pkg.Sm
    pkg.flash(T=350, VF=.5, zs=m.zs)
    assert pkg.phase == 'l/g'
    S2 = pkg.Sm
    assert_allclose(S1 - S2, 96.84959621651315, rtol=1e-3)


    # Higher pressure, less matching (gas constant diff probably; gas-liquid difference! No partial phase.)
    pkg.flash(T=450, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    S1 = pkg.Sm
    pkg.flash(T=450, P=1e8, zs=m.zs)
    assert pkg.phase == 'l'
    S2 = pkg.Sm
    S1 - S2
    assert_allclose(S1 - S2, 128.67194096593366, rtol=1e-3)

    # low P fluid to saturation pressure (both gas)
    pkg.flash(T=450, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    H1 = pkg.Hm
    S1 = pkg.Sm
    pkg.flash(T=450, VF=1, zs=m.zs)
    assert pkg.phase == 'g'
    H2 = pkg.Hm
    S2 = pkg.Sm
    assert_allclose(S1 - S2, 69.64345358808025, rtol=1e-3)

    # low pressure gas to liquid saturated
    pkg.flash(T=350, P=400, zs=m.zs)
    assert pkg.phase == 'g'
    S1 = pkg.Sm
    pkg.flash(T=350, VF=0, zs=m.zs)
    assert pkg.phase == 'l'
    S2 = pkg.Sm
    assert_allclose(S1 - S2, 124.44419797042649, rtol=1e-3)

    # High pressure liquid to partial evaporation
    pkg.flash(T=350, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    S1 = pkg.Sm
    pkg.flash(T=350, VF=.25, zs=m.zs)
    assert pkg.phase == 'l/g'
    S2 = pkg.Sm
    assert_allclose(S1 - S2, -7.913399921816193, rtol=1e-3)

    # High pressure temperature change
    pkg.flash(T=300, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    S1 = pkg.Sm
    pkg.flash(T=400, P=1e7, zs=m.zs)
    assert pkg.phase == 'l'
    S2 = pkg.Sm
    assert_allclose(S1 - S2, -50.38050604000216, atol=1)

    # High pressure temperature change and phase change
    pkg.flash(T=300, P=3e6, zs=m.zs)
    assert pkg.phase == 'l'
    S1 = pkg.Sm
    pkg.flash(T=400, P=1e5, zs=m.zs)
    assert pkg.phase == 'g'
    S2 = pkg.Sm
    S1 - S2
    assert_allclose(S1 - S2, -124.39457107124854, atol=1)


@pytest.mark.deprecated
def test_azeotrope_Txy_PR():
    IDs = ['ethanol', 'benzene']
    pkg = PropertyPackageConstants(IDs, name=PR_PKG)
    pkg.pkg.kijs = [[0.0, .0728], [0.0728, 0]]

    # Test the pressure in the test

    _, _, Tbubbles, Tdews = pkg.pkg.plot_Txy(P=101325., pts=30, values=True)

    Tbubbles_expect = [353.1524424999673, 351.21711105215405, 349.63220641849136, 348.3290291072549, 347.2552443556649, 346.37022614955663, 345.6419123814478, 345.0446351984003, 344.55759626315887, 344.16377920005266, 343.84916614883053, 343.60217197943285, 343.41323969870245, 343.2745605540422, 343.1798963139651, 343.12449170081203, 343.1050736632354, 343.1199423771055, 343.169167658216, 343.2549149821879, 343.38193882073034, 343.5582990521058, 343.7963805186986, 344.1143278723936, 344.53804741377195, 345.1039685436253, 345.8627772097754, 346.88426937346605, 348.26317130456636, 350.12491594342015]
    Tdews_expect = [353.1524424945457, 352.3912913474467, 351.6262944570331, 350.8588218276585, 350.0906535909099, 349.32409993796796, 348.56216098024134, 347.8087416697709, 347.0689431804551, 346.349459873305, 345.6591224986107, 345.00963438553083, 344.4165436003679, 343.90042076441017, 343.4879384830795, 343.21166686886806, 343.10538604291753, 343.1904450269102, 343.4583142995908, 343.8715382698287, 344.38531268086734, 344.96341038590646, 345.5807576414249, 346.22080282099756, 346.8726671468842, 347.52913516661, 348.18536889289476, 348.83809921197854, 349.4851121234294, 350.1249159362295]
    assert_allclose(Tbubbles, Tbubbles_expect, rtol=5e-5)
    assert_allclose(Tdews, Tdews_expect, rtol=5e-5)

@pytest.mark.deprecated
def test_azeotrope_Txy_PR_multiP():
    IDs = ['ethanol', 'benzene']
    pkg = PropertyPackageConstants(IDs, name=PR_PKG)
    pkg.pkg.kijs = [[0.0, .0728], [0.0728, 0]]
    #Test some more pressures for good measure (do not go too far near the boundaries)
    Tdews_vary_P_expect = [[220.15284322119734, 219.96736090890047, 222.4531025319982, 225.87591713961928, 228.38731541934482, 230.38394741856035, 232.04763019651986, 233.47741573028978, 234.73343380218137, 235.85502051831918, 236.8693632699694, 237.79606282049812, 238.6497311937851, 239.441561771029, 240.18032475929877], [250.29484272442642, 249.8077093695365, 249.42498602603337, 249.28679137901344, 251.96383913156598, 254.37995372490553, 256.413822517376, 258.1732216294687, 259.72617151880036, 261.1180840150342, 262.38075082537034, 263.53729905772974, 264.6050861496727, 265.5974792849115, 266.5249972102388], [291.6640151659878, 290.7705630707953, 289.9138195863271, 289.1364722089608, 288.52440010361823, 288.2911650820978, 289.2699169291151, 291.1074635611929, 292.88383384665804, 294.5345675748379, 296.06323507541447, 297.48280466114016, 298.8066120886574, 300.0464992568524, 301.2125736864664], [352.7187334210476, 351.14318764286776, 349.5582311684951, 347.9830060760723, 346.4505096140636, 345.01844631869784, 343.78971773705734, 342.946979856768, 342.761997697104, 343.3571699367641, 344.44973552643745, 345.7436125329223, 347.09887074851576, 348.456160479165, 349.78950974944104], [452.0244773102955, 448.93347954186527, 445.80843092367013, 442.6587093618919, 439.501298156353, 436.36519982883647, 433.2983005305142, 430.3773519002321, 427.7197877701338, 425.488417876116, 423.8636548918616, 422.9595322281223, 422.7424527930051, 423.0631573964071, 423.755679832123]]
    Tbubbles_vary_P_expect = [[220.15284322260558, 219.9593754659149, 219.97616818101181, 220.06166994291502, 220.11857644484724, 220.07120074079083, 219.85507103807385, 219.41277280716295, 218.69492646979015, 217.668864547681, 216.34458685271593, 214.85030366123252, 213.69173078234607, 215.05360231675624, 240.18032476043962], [250.29484272636603, 249.6034873812954, 249.3302912913737, 249.28015720321142, 249.32976951168072, 249.39258345431227, 249.40319499276376, 249.31112373153306, 249.08166823900348, 248.70647278451116, 248.234802114006, 247.86101246500266, 248.19942715491368, 251.37880207972458, 266.5249972119777], [291.6640151695664, 289.98349864091705, 289.03830617940577, 288.5439451223825, 288.32964841249037, 288.2845537334007, 288.33357406890497, 288.4270830783461, 288.5394805139744, 288.6772197151695, 288.90297364622535, 289.39555977182874, 290.6007278361622, 293.62911489553994, 301.2125736895028], [352.71873342667294, 349.111737745725, 346.7112146623439, 345.1062784039534, 344.0464541688307, 343.37007653346484, 342.96929893428904, 342.772655513814, 342.7375808864912, 342.85043503480443, 343.1348957652109, 343.67328993658566, 344.6514600873893, 346.44748552216527, 349.78950975665305], [452.0244773382353, 444.9894726934088, 439.5814848561124, 435.3968758569498, 432.1385100677904, 429.5895584761499, 427.5915768205421, 426.02882099085946, 424.8179436451578, 423.90205997868895, 423.2487129719721, 422.85201924536585, 422.7401871273592, 422.99064457143066, 423.7556798321766]]
    Tdews_vary_P = []
    Tbubbles_vary_P = []

    # pkg.pkg.plot_Txy(P=100, pts=100) # values=True
    for P in logspace(2, 6, 5):
        _, _, Tbubbles, Tdews = pkg.pkg.plot_Txy(P=P, pts=15, values=True)
        Tbubbles_vary_P.append(Tbubbles)
        Tdews_vary_P.append(Tdews)
    assert_allclose(Tbubbles_vary_P, Tbubbles_vary_P_expect, rtol=1e-5)
    assert_allclose(Tdews_vary_P, Tdews_vary_P_expect, rtol=1e-5)

@pytest.mark.deprecated
def test_azeotrope_Pxy_PR_multiT():
    IDs = ['ethanol', 'benzene']
    pkg = PropertyPackageConstants(IDs, name=PR_PKG)
    pkg.pkg.kijs = [[0.0, .0728], [0.0728, 0]]

    Ts = [220, 250, 300, 350, 400, 450, 475, 450, 500, 505, 507.5]
    Ps_bubble_multi_T_expect = [[2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672], [2413788.5246687443, 2641798.365260112, 2861327.402278104, 3072725.7261532187, 3276386.430826817, 3472735.47268973, 3662217.055850461, 3845273.4025023617, 4022317.494062474, 4193697.0600327696, 4359647.812662887, 4520233.860544795, 4675273.823398787, 4824253.350470867, 4966230.2319129715, 5099749.351949349, 5222801.450719186, 5332871.261916157, 5427095.16804713, 5502455.831709672]]
    Ps_dew_multi_T_expect = [[2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671], [2413788.5246687448, 2528934.820505938, 2653201.630551055, 2787361.571970873, 2932152.5813825456, 3088204.613722783, 3255927.030569813, 3435346.2652946324, 3625890.6578108566, 3826139.6891573607, 4033592.988357248, 4244562.319550634, 4454311.19552944, 4657505.6804501135, 4848882.834798467, 5023886.247109449, 5179004.275036525, 5311703.561411566, 5420071.437922198, 5502455.831709671]]
    Ps_bubble_multi_T, Ps_dew_multi_T = [], []
    for T in Ts:
        _, _, Ps_bubble, Ps_dew = pkg.pkg.plot_Pxy(T=507.5, pts=20, ignore_errors=True, values=True)
        Ps_bubble_multi_T.append(Ps_bubble)
        Ps_dew_multi_T.append(Ps_dew)
    assert_allclose(Ps_bubble_multi_T_expect, Ps_bubble_multi_T, rtol=1e-6)
    assert_allclose(Ps_dew_multi_T_expect, Ps_dew_multi_T, rtol=1e-6)


@pytest.mark.deprecated
def test_phase_envelope_ethane_pentane():

    IDs = ['ethane', 'n-pentane']
    pkg = PropertyPackageConstants(IDs, PR_PKG, kijs=[[0, 7.609447e-003], [7.609447e-003, 0]])
    zs = [0.7058334393128614, 0.2941665606871387] # 50/50 mass basis

    max_step_damping = 100
    P_high = 8e6
    factor = 1.2
    min_step_termination = 1000
    min_factor_termination = 1.001
    pkg.pkg.FLASH_VF_TOL = 1e-8
    max_P_step = 1e5

    P_low = 1e5
    spec_points = linspace(1e5, 6.8e6, 68)

    P_points, Ts_known, xs_known = pkg.pkg.dew_T_envelope(zs, P_low=P_low, P_high=P_high, xtol=1E-10,
                           factor=factor, min_step_termination=min_step_termination,
                          min_factor_termination=min_factor_termination,
                          max_step_damping=max_step_damping,
                          max_P_step=max_P_step,
                          spec_points=spec_points)

    P_points2, Ts_known2, ys_known = pkg.pkg.bubble_T_envelope(zs, P_low=P_low, P_high=P_high, xtol=1E-10,
                           factor=factor, min_step_termination=min_step_termination,
                           max_step_damping=max_step_damping,
                           min_factor_termination=min_factor_termination,
                           max_P_step=max_P_step, spec_points=spec_points)
    Ps_dew_check = []
    Ts_dew_check = []
    Ts_dew_expect = [277.1449361694948, 293.9890986702753, 304.8763147090649, 313.1006603531763, 319.7750626828419, 325.42150966613895, 330.32990856864086, 334.6791912532372, 338.58812791519466, 342.13987634031974, 345.3950895854326, 348.39946023112896, 351.1883247302556, 353.7896091573966, 356.22578835719867, 358.51523195418594, 360.673155009561, 362.71230559820697, 364.64347249145516, 366.47586686424677, 368.21741391309746, 369.8749788315006, 371.4545441481416, 372.96135047685806, 374.40000935978657, 375.774594553273, 377.0887164639959, 378.3455832681606, 379.54805139424366, 380.698667422777, 381.7997029894565, 382.8531839253168, 383.8609145986068, 384.824498212078, 385.74535365141924, 386.6247293397855, 387.4637144549204, 388.2632477701861, 389.02412430395054, 389.7469998909282, 390.4323937166012, 391.08068879770735, 391.69213029960156, 392.2668215113749, 392.8047171889375, 393.30561384008115, 393.76913637985547, 394.19472032380185, 394.58158839582626, 394.9287200011976, 395.2348113354687, 395.4982230372662, 395.71691081859336, 395.8883324260842, 396.0093207511565, 396.0759073750358, 396.0830711573792, 396.024369487178, 395.8913790901176, 395.67280294095485, 395.3529926936849, 394.9092730479461, 394.3067055020046, 393.48636807223045, 392.33342385249546, 390.55261457054587]
    for P_dew, T_dew in zip(P_points, Ts_known):
        if abs(P_dew % 1e5) < 1e-5:
            Ps_dew_check.append(P_dew)
            Ts_dew_check.append(T_dew)

    Ps_bubble_check = []
    Ts_bubble_check = []
    Ts_bubble_expect = [277.1449361694948, 293.9890986702753, 304.8763147090649, 313.1006603531763, 319.7750626828419, 325.42150966613895, 330.32990856864086, 334.6791912532372, 338.58812791519466, 342.13987634031974, 345.3950895854326, 348.39946023112896, 351.1883247302556, 353.7896091573966, 356.22578835719867, 358.51523195418594, 360.673155009561, 362.71230559820697, 364.64347249145516, 366.47586686424677, 368.21741391309746, 369.8749788315006, 371.4545441481416, 372.96135047685806, 374.40000935978657, 375.774594553273, 377.0887164639959, 378.3455832681606, 379.54805139424366, 380.698667422777, 381.7997029894565, 382.8531839253168, 383.8609145986068, 384.824498212078, 385.74535365141924, 386.6247293397855, 387.4637144549204, 388.2632477701861, 389.02412430395054, 389.7469998909282, 390.4323937166012, 391.08068879770735, 391.69213029960156, 392.2668215113749, 392.8047171889375, 393.30561384008115, 393.76913637985547, 394.19472032380185, 394.58158839582626, 394.9287200011976, 395.2348113354687, 395.4982230372662, 395.71691081859336, 395.8883324260842, 396.0093207511565, 396.0759073750358, 396.0830711573792, 396.024369487178, 395.8913790901176, 395.67280294095485, 395.3529926936849, 394.9092730479461, 394.3067055020046, 393.48636807223045, 392.33342385249546, 390.55261457054587]
    for P_bubble, T_bubble in zip(P_points, Ts_known):
        if abs(P_bubble % 1e5) < 1e-5:
            Ps_bubble_check.append(P_bubble)
            Ts_bubble_check.append(T_bubble)

    assert_allclose(Ps_bubble_check, spec_points[:-2])
    assert_allclose(Ps_dew_check, spec_points[:-2])
    assert_allclose(Ts_dew_check, Ts_dew_expect, rtol=1e-5)
    assert_allclose(Ts_bubble_check, Ts_bubble_expect, rtol=1e-5)

@pytest.mark.deprecated
def test_ethane_pentane_TP_Tdew_Tbubble_TP():
    # Takes 9 seconds!
    IDs = ['ethane', 'n-pentane']
    pkg = PropertyPackageConstants(IDs, PR_PKG, kijs=[[0, 7.609447e-003], [7.609447e-003, 0]])
    zs = [0.7058334393128614, 0.2941665606871387] # 50/50 mass basis
    pkg = pkg.pkg

    VFs = []
    all_Ts = []
    all_Ps = []
    P_high = 6.1e6 # goal: 6e6 It worked!
    P_low = 1e3
    Ps = logspace(log10(P_low), log10(P_high), 50)
    T_lows = []
    T_highs = []

    for P in Ps:
        pkg.flash(P=P, VF=0, zs=zs)
        T_low = pkg.T # 129 K
        T_lows.append(T_low)
        pkg.flash(P=P, VF=1, zs=zs)
        T_high = pkg.T # 203 K
        T_highs.append(T_high)

        for Wilson_first in (False, True):
            VFs_working = []
            Ts = linspace(T_low+1e-4, T_high-1e-4, 50)
            for T in Ts:
                ans = pkg.flash_TP_zs(P=P, T=T, zs=zs, Wilson_first=Wilson_first)
                VFs_working.append(ans[-1])
                if ans[0] != 'l/g':
                    raise ValueError("Converged to single phase solution at T=%g K, P=%g Pa" %(T, P))

        VFs.append(VFs_working)
        all_Ts.append(Ts)
        all_Ps.append(Ps)

